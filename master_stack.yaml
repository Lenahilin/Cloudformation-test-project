---
Parameters: 
  PublicSubnetCidrBlock: 
    Type: String
    Description: Provide a valid CIDR block for the public subnet
  PrivateSubnetCidrBlock: 
    Type: String
    Description: Provide a valid CIDR block for the private subnet
  DBPassword: 
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$

Resources:
# Network resources

  Vpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.1.0.0/16
      Tags:
      - Key: Name
        Value: lucid_vpc

  # Internet gateway for communication with internet outside of the VPC
  Igw: 
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: lucid_igw 

  # Attaching the internet gateway to the VPC
  IgwVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref PublicSubnetCidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: eu-central-1a # hardcoded to avoid AZ collision for Application loadbalancer
      Tags:
      - Key: Name
        Value: lucid_public_subnet

  # Routing table for the public subnet
  PublicSubnetRT:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: lucid_public_subnet_rt

  # Attaching the route table to the public subnet
  PublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicSubnetRT
      SubnetId: !Ref PublicSubnet

  # Public subnet routing table entry sending all outbound traffic to the Internet gateway
  PublicTrafficRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
      RouteTableId: !Ref PublicSubnetRT

    # Required for Application loadbalancer
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: 10.1.3.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: eu-central-1c
      Tags:
      - Key: Name
        Value: lucid_public_subnet_2

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref PrivateSubnetCidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: eu-central-1a # hardcoded to avoid AZ collision for DB Subnet group
      Tags:
      - Key: Name
        Value: lucid_private_subnet

# Security groups

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'LB SG allowing incoming traffic from the internet'
      GroupName: lucid-lb-sg
      SecurityGroupIngress: 
        - Description: 'allows incoming traffic from loadbalancer to backend instances'
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
          ToPort: 80
      VpcId: !Ref Vpc

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'EC2 SG allowing incoming traffic from the loadbalancer'
      GroupName: lucid-backend-sg
      SecurityGroupIngress: 
        - Description: 'allows incoming traffic from loadbalancer to backend instances'
          IpProtocol: -1
          SourceSecurityGroupId: !Ref LBSecurityGroup
      VpcId: !Ref Vpc

  # Egress rule is configured separately to avoid cross-stack reference not allowed by CloudFormation
  LBSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: 'allows outgoing traffic from the LB to to backend instances'
      DestinationSecurityGroupId: !Ref BackendSecurityGroup
      FromPort: 80
      GroupId: !Ref LBSecurityGroup
      IpProtocol: -1
      ToPort: 80

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'allows incoming traffic from ec2 instances having the backend SG assigned to the DB instance'
      GroupName: lucid-db-sg
      SecurityGroupIngress: 
        - Description: 'allows incoming traffic from backend instances to the default mysql port'
          IpProtocol: -1
          SourceSecurityGroupId: !Ref BackendSecurityGroup
          ToPort: 3306
      VpcId: !Ref Vpc

# Database resources

  # Required for the DB instance
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: 10.1.4.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: eu-central-1c
      Tags:
      - Key: Name
        Value: lucid_private_subnet_2

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: 'subnet group for the test RDS instance'
      DBSubnetGroupName: lucid_db_subnet_group
      SubnetIds: 
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet
      Tags: 
      - Key: Name
        Value: lucid_db_subnet_group

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: '10'
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: lucid-db
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: MySQL
      EngineVersion: '5.7.26'
      MasterUsername: 'admin'
      MasterUserPassword: !Ref DBPassword
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup

# Computing resources

  # Launch template for instances within the Autoscaling group
  LT:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: 'lucid-launch-template'
      LaunchTemplateData: 
        ImageId: ami-00aa4671cbf840d82 # the latest standart Linux AMI
        InstanceType: t2.micro # I used micro instead of nano since I'm not sure if nano is eligible for free tier
        SecurityGroupIds:
          - !Ref BackendSecurityGroup

  # Target group for routing traffic from the loadbalancer to the instances
  TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      TargetType: instance
      Port: 80
      Protocol: HTTP

  ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: 'lucid-as-group'
      LaunchTemplate:
        LaunchTemplateId: !Ref LT
        Version: !GetAtt LT.LatestVersionNumber
      MaxSize: '2'
      MinSize: '2'
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet
      TargetGroupARNs:
        - !Ref TG

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: 'lucid-lb'
      SecurityGroups: 
        - !Ref LBSecurityGroup
      Tags: 
      - Key: Name
        Value: lucid_loadbalancer
      Subnets: # Application LB requires having at least two public subnets in different availability zones; for testing purposes I created an additional subnet with fixed CIDR block and availability zone
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      Type: 'application'

  # Listener routing traffic from the loadbalancer to the instances
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: 'forward'
          TargetGroupArn: !Ref TG
      LoadBalancerArn: !Ref AppLB
      Port: 80
      Protocol: HTTP
